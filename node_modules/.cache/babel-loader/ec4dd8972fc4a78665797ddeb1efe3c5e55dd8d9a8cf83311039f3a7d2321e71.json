{"ast":null,"code":"// Returns all nodes in the order in which they were visited.\n// Make nodes point back to their previous node so that we can compute the shortest path\n// by backtracking from the finish node.\n\nexport function AStar(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid); // Q: different from using grid or slice of grid???\n\n  while (unvisitedNodes.length) {\n    sortByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (!closestNode.isWall) {\n      // If the closest node is at a distance of infinity,\n      // we must be trapped and should stop.\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\n      closestNode.isVisited = true;\n      visitedNodesInOrder.push(closestNode);\n      if (closestNode === finishNode) return visitedNodesInOrder;\n      updateUnvisitedNeighbors(closestNode, grid);\n    }\n  }\n}\n_c = AStar;\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\nfunction sortByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1 + neighbor.distanceToFinishNode;\n    neighbor.previousNode = node;\n  }\n}\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\nvar _c;\n$RefreshReg$(_c, \"AStar\");","map":{"version":3,"names":["AStar","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","length","sortByDistance","closestNode","shift","isWall","Infinity","isVisited","push","updateUnvisitedNeighbors","_c","nodes","row","node","sort","nodeA","nodeB","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","distanceToFinishNode","previousNode","neighbors","col","filter","$RefreshReg$"],"sources":["/Users/saurav/Desktop/Graph Algorithm Visualiser/src/algorithms/aStar.js"],"sourcesContent":["// Returns all nodes in the order in which they were visited.\n// Make nodes point back to their previous node so that we can compute the shortest path\n// by backtracking from the finish node.\n\nexport function AStar(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid); // Q: different from using grid or slice of grid???\n\n  while (unvisitedNodes.length) {\n    sortByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (!closestNode.isWall) {\n      // If the closest node is at a distance of infinity,\n      // we must be trapped and should stop.\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\n      closestNode.isVisited = true;\n      visitedNodesInOrder.push(closestNode);\n      if (closestNode === finishNode) return visitedNodesInOrder;\n      updateUnvisitedNeighbors(closestNode, grid);\n    }\n  }\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\nfunction sortByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1 + neighbor.distanceToFinishNode;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {col, row} = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA,OAAO,SAASA,KAAKA,CAACC,IAAI,EAAEC,SAAS,EAAEC,UAAU,EAAE;EACjD,MAAMC,mBAAmB,GAAG,EAAE;EAC9BF,SAAS,CAACG,QAAQ,GAAG,CAAC;EACtB,MAAMC,cAAc,GAAGC,WAAW,CAACN,IAAI,CAAC,CAAC,CAAC;;EAE1C,OAAOK,cAAc,CAACE,MAAM,EAAE;IAC5BC,cAAc,CAACH,cAAc,CAAC;IAC9B,MAAMI,WAAW,GAAGJ,cAAc,CAACK,KAAK,CAAC,CAAC;IAC1C;IACA,IAAI,CAACD,WAAW,CAACE,MAAM,EAAE;MACvB;MACA;MACA,IAAIF,WAAW,CAACL,QAAQ,KAAKQ,QAAQ,EAAE,OAAOT,mBAAmB;MACjEM,WAAW,CAACI,SAAS,GAAG,IAAI;MAC5BV,mBAAmB,CAACW,IAAI,CAACL,WAAW,CAAC;MACrC,IAAIA,WAAW,KAAKP,UAAU,EAAE,OAAOC,mBAAmB;MAC1DY,wBAAwB,CAACN,WAAW,EAAET,IAAI,CAAC;IAC7C;EACF;AACF;AAACgB,EAAA,GAnBejB,KAAK;AAqBrB,SAASO,WAAWA,CAACN,IAAI,EAAE;EACzB,MAAMiB,KAAK,GAAG,EAAE;EAChB,KAAK,MAAMC,GAAG,IAAIlB,IAAI,EAAE;IACtB,KAAK,MAAMmB,IAAI,IAAID,GAAG,EAAE;MACtBD,KAAK,CAACH,IAAI,CAACK,IAAI,CAAC;IAClB;EACF;EACA,OAAOF,KAAK;AACd;AAEA,SAAST,cAAcA,CAACH,cAAc,EAAE;EACtCA,cAAc,CAACe,IAAI,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAKD,KAAK,CAACjB,QAAQ,GAAGkB,KAAK,CAAClB,QAAQ,CAAC;AACxE;AAEA,SAASW,wBAAwBA,CAACI,IAAI,EAAEnB,IAAI,EAAE;EAC5C,MAAMuB,kBAAkB,GAAGC,qBAAqB,CAACL,IAAI,EAAEnB,IAAI,CAAC;EAC5D,KAAK,MAAMyB,QAAQ,IAAIF,kBAAkB,EAAE;IACzCE,QAAQ,CAACrB,QAAQ,GAAGe,IAAI,CAACf,QAAQ,GAAG,CAAC,GAAGqB,QAAQ,CAACC,oBAAoB;IACrED,QAAQ,CAACE,YAAY,GAAGR,IAAI;EAC9B;AACF;AAEA,SAASK,qBAAqBA,CAACL,IAAI,EAAEnB,IAAI,EAAE;EACzC,MAAM4B,SAAS,GAAG,EAAE;EACpB,MAAM;IAACC,GAAG;IAAEX;EAAG,CAAC,GAAGC,IAAI;EACvB,IAAID,GAAG,GAAG,CAAC,EAAEU,SAAS,CAACd,IAAI,CAACd,IAAI,CAACkB,GAAG,GAAG,CAAC,CAAC,CAACW,GAAG,CAAC,CAAC;EAC/C,IAAIX,GAAG,GAAGlB,IAAI,CAACO,MAAM,GAAG,CAAC,EAAEqB,SAAS,CAACd,IAAI,CAACd,IAAI,CAACkB,GAAG,GAAG,CAAC,CAAC,CAACW,GAAG,CAAC,CAAC;EAC7D,IAAIA,GAAG,GAAG,CAAC,EAAED,SAAS,CAACd,IAAI,CAACd,IAAI,CAACkB,GAAG,CAAC,CAACW,GAAG,GAAG,CAAC,CAAC,CAAC;EAC/C,IAAIA,GAAG,GAAG7B,IAAI,CAAC,CAAC,CAAC,CAACO,MAAM,GAAG,CAAC,EAAEqB,SAAS,CAACd,IAAI,CAACd,IAAI,CAACkB,GAAG,CAAC,CAACW,GAAG,GAAG,CAAC,CAAC,CAAC;EAChE,OAAOD,SAAS,CAACE,MAAM,CAACL,QAAQ,IAAI,CAACA,QAAQ,CAACZ,SAAS,CAAC;AAC1D;AAAC,IAAAG,EAAA;AAAAe,YAAA,CAAAf,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}